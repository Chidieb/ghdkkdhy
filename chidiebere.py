import base64
exec(base64.b64decode("IyBEZWNvbXBpbGVkIEJ5IENoaWRpIEtoYW4KIyBHaXRodWIgOiBodHRwczovL2dpdGh1Yi5jb20vYXJ5YW5vdHJpa3MKIyB1bmNvbXB5bGU2IHZlcnNpb24gMy43LjQKIyBQeXRob24gYnl0ZWNvZGUgMi43CiMgRGVjb21waWxlZCBmcm9tOiBQeXRob24gMi43LjE4IChkZWZhdWx0LCBNYXIgMjAgMjAyMSwgMTQ6NTg6MjUpIAojIFtHQ0MgNC4yLjEgQ29tcGF0aWJsZSBBbmRyb2lkICg2NDU0NzczIGJhc2VkIG9uIHIzNjU2MzFjMikgQ2xhbmcgOS4wLjggKGh0dHBzOi8KIyBFbWJlZGRlZCBmaWxlIG5hbWU6IGFzbwppbXBvcnQgb3MsIHN5cywgdGltZSwgZGF0ZXRpbWUsIHJlLCB0aHJlYWRpbmcsIGpzb24sIHJhbmRvbSwgcmVxdWVzdHMsIGhhc2hsaWIsIGNvb2tpZWxpYiwgdXVpZApmcm9tIG11bHRpcHJvY2Vzc2luZy5wb29sIGltcG9ydCBUaHJlYWRQb29sCmZyb20gcmVxdWVzdHMuZXhjZXB0aW9ucyBpbXBvcnQgQ29ubmVjdGlvbkVycm9yCl9fYXV0aG9yX18gPSAnS2hhbicKX19jb3B5cmlnaHQgPSAnQWxsIHJpZ2h0cyByZXNlcnZlZCAuIENvcHlyaWdodCAgQ2hpZGkgS2hhbicKb3Muc3lzdGVtKCd0ZXJtdXgtc2V0dXAtc3RvcmFnZScpCnRyeToKICAgIG9zLm1rZGlyKCcvc2RjYXJkL2lkcycpCmV4Y2VwdCBPU0Vycm9yOgogICAgcGFzcwoKYmQgPSByYW5kb20ucmFuZGludCgyMDAwMDAwMC4wLCAzMDAwMDAwMC4wKQpzaW0gPSByYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApCmhlYWRlciA9IHsneC1mYi1jb25uZWN0aW9uLWJhbmR3aWR0aCc6IHJlcHIoYmQpLCAneC1mYi1zaW0taG5pJzogcmVwcihzaW0pLCAKICAgJ3gtZmItbmV0LWhuaSc6IHJlcHIoc2ltKSwgCiAgICd4LWZiLWNvbm5lY3Rpb24tcXVhbGl0eSc6ICdFWENFTExFTlQnLCAKICAgJ3gtZmItY29ubmVjdGlvbi10eXBlJzogJ2NlbGwuQ1RSYWRpb0FjY2Vzc1RlY2hub2xvZ3lIU0RQQScsIAogICAndXNlci1hZ2VudCc6ICdEYWx2aWsvMS42LjAgKExpbnV4OyBVOyBBbmRyb2lkIDQuNC4yOyBOWDU1IEJ1aWxkL0tPVDU1MDYpIFtGQkFOL0ZCNEE7RkJBVi8xMDYuMC4wLjI2LjY4O0ZCQlYvNDU5MDQxNjA7RkJETS97ZGVuc2l0eT0zLjAsd2lkdGg9MTA4MCxoZWlnaHQ9MTkyMH07RkJMQy9pdF9JVDtGQlJWLzQ1OTA0MTYwO0ZCQ1IvUG9zdGVNb2JpbGU7RkJNRi9hc3VzO0ZCQkQvYXN1cztGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9BU1VTX1owMEFEO0ZCU1YvNS4wO0ZCT1AvMTtGQkNBL3g4Njphcm1lYWJpLXY3YTtdJywgCiAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywgCiAgICd4LWZiLWh0dHAtZW5naW5lJzogJ0xpZ2VyJ30Kb3Muc3lzdGVtKCdnaXQgcHVsbCcpCm9zLnN5c3RlbSgnY2xlYXInKQpsb2dvID0gIiIiClwwMzNbMTs5NG0gIyMjIyMjICMgICAgIyAjICMjIyMjIyAjClwwMzNbMTs5Mm0gIyAgICAgICMgICAgIyAjICMgICAgIyAjClwwMzNbMTs5M20gIyAgICAgICMgICAgIyAjICMgICAgIyAjClwwMzNbMTs5NW0gIyAgICAgICMjIyMjIyAjICMgICAgIyAjClwwMzNbMTs5NG0gIyAgICAgICMgICAgIyAjICMgICAgIyAjClwwMzNbMTs5Nm0gIyAgICAgICMgICAgIyAjICMgICAgIyAjIApcMDMzWzE7OTdtICMjIyMjIyAjICAgICMgIyAjIyMjIyMgIwpcMDMzWzE7OTRtIENoaWRpZWJlcmUgS2hhbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogXDAzM1szNzsxbVtcMDMzWzQxOzFtIEZBQ0VCT09LIEFDQ09VTlQgQ0xPTklORyBcMDMzWzAwOzFtXDAzM1szNzsxbSBdXG4KIFwwMzNbMzI7MW1DcmVhdG9yIFwwMzNbMzc7MW06IFwwMzNbMzM7MW1DaGlkaWViZWJlcmUgS2hhbgogXDAzM1szMjsxbVZlcnNpb24gXDAzM1szNzsxbTogXDAzM1szMzsxbTEuMgoiIiIKZGVmIHJlZygpOgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBwcmludCBsb2dvCiAgICBwcmludCAnJwogICAgcHJpbnQgJ1x4MWJbMTszMTsxbVRha2UgVGhlIEFwcHJvdmFsIEZvciBMb2dpbicKICAgIHByaW50ICcnCiAgICB0aW1lLnNsZWVwKDEpCiAgICB0cnk6CiAgICAgICAgdG8gPSBvcGVuKCcvc2RjYXJkLy5oc3QudHh0JywgJ3InKS5yZWFkKCkKICAgIGV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOgogICAgICAgIHJlZzIoKQoKICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9DaGlkaWViL2Jvb21zL21haW4vc2VydmVyLnR4dCcpLnRleHQKICAgIGlmIHRvIGluIHI6CiAgICAgICAgb3Muc3lzdGVtKCdjZCAuLi4uLiAmJiBucG0gaW5zdGFsbCcpCiAgICAgICAgb3Muc3lzdGVtKCdmdXNlciAtayA1MDAwL3RjcCAmJykKICAgICAgICBvcy5zeXN0ZW0oJyMnKQogICAgICAgIG9zLnN5c3RlbSgnY2QgLi4uLi4gJiYgbm9kZSBpbmRleC5qcyAmJykKICAgICAgICB0aW1lLnNsZWVwKDUpCiAgICAgICAgaXAoKQogICAgZWxzZToKICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICBwcmludCBsb2dvCiAgICAgICAgcHJpbnQgJ1x0QXBwcm92ZWQgRmFpbGVkJwogICAgICAgIHByaW50ICcgXHgxYlsxOzkybVlvdXIgSWQgSXMgTm90IEFwcHJvdmVkIEFscmVhZHkgJwogICAgICAgIHByaW50ICcgXHgxYlsxOzkybU5vdGUgQXBwcm92YWwgSXMgTm90IEZvciBGcmVlICcKICAgICAgICBwcmludCAnIFx4MWJbMTs5Mm1Db3B5IHRoZSBpZCBhbmQgc2VuZCB0byBhZG1pbicKICAgICAgICBwcmludCAnIFx4MWJbMTs5Mm1Zb3VyIGlkOiAnICsgdG8KICAgICAgICByYXdfaW5wdXQoJ1x4MWJbMTs5M20gUHJlc3MgZW50ZXIgdG8gc2VuZCBpZCcpCiAgICAgICAgb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL3dhLm1lLysyMzQ4MTA5MDQwNjUxJykKICAgICAgICByZWcoKQoKCmRlZiByZWcyKCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50IGxvZ28KICAgIHByaW50ICdcdEFwcHJvdmFsIG5vdCBkZXRlY3RlZCcKICAgIHByaW50ICcgXHgxYlsxOzkybUNvcHkgYW5kIHByZXNzIGVudGVyICwgdGhlbiBzZWxlY3Qgd2hhdHNhcHAgdG8gY29udGludWUnCiAgICBpZCA9IHV1aWQudXVpZDQoKS5oZXhbOjUwXQogICAgcHJpbnQgJyBZb3VyIGlkOiAnICsgaWQKICAgIHByaW50ICcnCiAgICByYXdfaW5wdXQoJyBQcmVzcyBlbnRlciB0byBnbyB0byB3aGF0c2FwcCAnKQogICAgb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL3dhLm1lLysyMzQ4MTA5MDQwNjUxJykKICAgIHNhdiA9IG9wZW4oJy9zZGNhcmQvLlNldmVyLnR4dCcsICd3JykKICAgIHNhdi53cml0ZShpZCkKICAgIHNhdi5jbG9zZSgpCiAgICByYXdfaW5wdXQoJ1x4MWJbMTs5Mm0gUHJlc3MgZW50ZXIgdG8gY2hlY2sgQXBwcm92YWwgJykKICAgIHJlZygpCgoKZGVmIGlwKCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50IGxvZ28KICAgIHByaW50ICdcdENvbGxlY3RpbmcgZGV2aWNlIGluZm8nCiAgICB0cnk6CiAgICAgICAgaXBpbmZvID0gcmVxdWVzdHMuZ2V0KCdodHRwOi8vaXAtYXBpLmNvbS9qc29uLycpCiAgICAgICAgeiA9IGpzb24ubG9hZHMoaXBpbmZvLnRleHQpCiAgICAgICAgaXBzID0gelsncXVlcnknXQogICAgICAgIGNvdW50cnkgPSB6Wydjb3VudHJ5J10KICAgICAgICByZWdpID0gelsncmVnaW9uTmFtZSddCiAgICAgICAgbmV0d29yayA9IHpbJ2lzcCddCiAgICBleGNlcHQ6CiAgICAgICAgcGFzcwoKICAgIHByaW50ICdceDFiWzE7OTJtIFlvdXIgaXA6ICcgKyBpcHMKICAgIHRpbWUuc2xlZXAoMSkKICAgIHByaW50ICdceDFiWzE7OTJtIFlvdXIgY291bnRyeTogJyArIGNvdW50cnkKICAgIHRpbWUuc2xlZXAoMSkKICAgIHByaW50ICdceDFiWzE7OTJtIFlvdXIgcmVnaW9uOiAnICsgcmVnaQogICAgdGltZS5zbGVlcCgxKQogICAgcHJpbnQgJyBceDFiWzE7OTJtWW91ciBuZXR3b3JrOiAnICsgbmV0d29yawogICAgdGltZS5zbGVlcCgxKQogICAgcHJpbnQgJyBMb2FkaW5nIC4uLicKICAgIHRpbWUuc2xlZXAoMSkKICAgIGxvZ19tZW51KCkKCgpkZWYgbG9nX21lbnUoKToKICAgIHRyeToKICAgICAgICB0X2NoZWNrID0gb3BlbignYWNjZXNzX3Rva2VuLnR4dCcsICdyJykKICAgICAgICBtZW51KCkKICAgIGV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOgogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgICAgIHByaW50IGxvZ28KICAgICAgICBwcmludCAnXHgxYlsxOzkzbSB+fn5+IExvZ2luIG1lbnUgfn5+flx4MWJbMTs5MW0nCiAgICAgICAgcHJpbnQgNDcgKiAnLScKICAgICAgICBwcmludCAnXHgxYlsxOzkybVsxXSBMb2dpbiB3aXRoIEZhY2VCb29rJwogICAgICAgIHByaW50ICdceDFiWzE7OTJtWzJdIExvZ2luIHdpdGggdG9rZW4nCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5Mm1bM10gTG9naW4gd2l0aCBjb29raWVzJwogICAgICAgIHByaW50ICcnCiAgICAgICAgbG9nX21lbnVfcygpCgoKZGVmIGxvZ19tZW51X3MoKToKICAgIHMgPSByYXdfaW5wdXQoJyBceDFiWzE7OTdtXHhlMlx4OTVceGIwXHhlMlx4OTRceDgwQ2hpZGlceGUyXHg5ZVx4YTQgJykKICAgIGlmIHMgPT0gJzEnOgogICAgICAgIGxvZ19mYigpCiAgICBlbGlmIHMgPT0gJzInOgogICAgICAgIGxvZ190b2tlbigpCiAgICBlbGlmIHMgPT0gJzMnOgogICAgICAgIGxvZ19jb29raWUoKQogICAgZWxzZToKICAgICAgICBwcmludCAnJwogICAgICAgIHByaW50ICdcXCBTZWxlY3QgdmFsaWQgb3B0aW9uICcKICAgICAgICBwcmludCAnJwogICAgICAgIGxvZ19tZW51X3MoKQoKCmRlZiBsb2dfZmIoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgcHJpbnQgbG9nbwogICAgcHJpbnQgJ1x4MWJbMTszMTsxbUxvZ2luIHdpdGggaWQvcGFzcycKICAgIHByaW50IDQ3ICogJy0nCiAgICBsaWQgPSByYXdfaW5wdXQoJ1x4MWJbMTs5Mm0gSWQvbWFpbC9ubzogJykKICAgIHB3ZHMgPSByYXdfaW5wdXQoJyBceDFiWzE7OTNtUGFzc3dvcmQ6ICcpCiAgICB0cnk6CiAgICAgICAgZGF0YSA9IHJlcXVlc3RzLmdldCgnaHR0cDovL2xvY2FsaG9zdDo1MDAwL2F1dGg/aWQ9JyArIHVpZCArICcmcGFzcz0nICsgcHdkKS50ZXh0CiAgICAgICAgcSA9IGpzb24ubG9hZHMoZGF0YSkKICAgICAgICBpZiAnbG9jJyBpbiBxOgogICAgICAgICAgICB0cyA9IG9wZW4oJ2FjY2Vzc190b2tlbi50eHQnLCAndycpCiAgICAgICAgICAgIHRzLndyaXRlKHFbJ2xvYyddKQogICAgICAgICAgICB0cy5jbG9zZSgpCiAgICAgICAgICAgIG1lbnUoKQogICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHFbJ2Vycm9yJ106CiAgICAgICAgICAgIHByaW50ICcgVXNlciBtdXN0IHZlcmlmeSBhY2NvdW50IGJlZm9yZSBsb2dpbicKICAgICAgICAgICAgcmF3X2lucHV0KCdceDFiWzE7OTJtIFByZXNzIGVudGVyIHRvIHRyeSBhZ2FpbiAnKQogICAgICAgICAgICBsb2dfZmIoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50ICcgSWQvUGFzcyBtYXkgYmUgd3JvbmcnCiAgICAgICAgICAgIHJhd19pbnB1dCgnIFx4MWJbMTs5Mm1QcmVzcyBlbnRlciB0byB0cnkgYWdhaW4gJykKICAgICAgICAgICAgbG9nX2ZiKCkKICAgIGV4Y2VwdDoKICAgICAgICBwcmludCAnJwogICAgICAgIHByaW50ICdFeGl0aW5nIHRvb2wnCiAgICAgICAgb3Muc3lzdGVtKCdleGl0JykKCgpkZWYgbG9nX3Rva2VuKCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50IGxvZ28KICAgIHByaW50ICdceDFiWzE7OTNtTG9naW4gd2l0aCB0b2tlblx4MWJbMTs5MW0nCiAgICBwcmludCA0NyAqICctJwogICAgdG9rID0gcmF3X2lucHV0KCcgXHgxYlsxOzkybVBhc3RlIHRva2VuIGhlcmU6IFx4MWJbMTs5MW0nKQogICAgcHJpbnQgNDcgKiAnLScKICAgIHRfcyA9IG9wZW4oJ2FjY2Vzc190b2tlbi50eHQnLCAndycpCiAgICB0X3Mud3JpdGUodG9rKQogICAgdF9zLmNsb3NlKCkKICAgIG1lbnUoKQoKCmRlZiBsb2dfY29va2llKCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50IGxvZ28KICAgIHByaW50ICcnCiAgICBwcmludCAnXHgxYlsxOzMxOzFtTG9naW4gQ29va2llcycKICAgIHByaW50ICcnCiAgICB0cnk6CiAgICAgICAgY29va2llID0gcmF3X2lucHV0KCcgUGFzdGUgY29va2llcyBoZXJlOiAnKQogICAgICAgIGRhdGEgPSB7J3VzZXItYWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBLaXdpIENocm9tZS82OC4wLjM0MzguMCBTYWZhcmkvNTM3LjM2JywgJ3JlZmVyZXInOiAnaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS8nLCAKICAgICAgICAgICAnaG9zdCc6ICdtLmZhY2Vib29rLmNvbScsIAogICAgICAgICAgICdvcmlnaW4nOiAnaHR0cHM6Ly9tLmZhY2Vib29rLmNvbScsIAogICAgICAgICAgICd1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzJzogJzEnLCAKICAgICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2lkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43JywgCiAgICAgICAgICAgJ2NhY2hlLWNvbnRyb2wnOiAnbWF4LWFnZT0wJywgCiAgICAgICAgICAgJ2FjY2VwdCc6ICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44JywgCiAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICd0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgnLCAKICAgICAgICAgICAnY29va2llJzogY29va2llfQogICAgICAgIGMxID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL20uZmFjZWJvb2suY29tL2NvbXBvc2VyL29jZWxvdC9hc3luY19sb2FkZXIvP3B1Ymxpc2hlcj1mZWVkI189XycsIGhlYWRlcnM9ZGF0YSkKICAgICAgICBjMiA9IHJlLnNlYXJjaCgnKEVBQUFcXHcrKScsIGMxLnRleHQpCiAgICAgICAgaGFzaWwgPSBjMi5ncm91cCgxKQogICAgICAgIG9rID0gb3BlbignYWNjZXNzX3Rva2VuLnR4dCcsICd3JykKICAgICAgICBvay53cml0ZShoYXNpbCkKICAgICAgICBvay5jbG9zZSgpCiAgICAgICAgbWVudSgpCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgcHJpbnQgJycKICAgICAgICBwcmludCAnXHRJbnZhbGlkIGNvb2tpZXMnCiAgICAgICAgcHJpbnQgJycKICAgICAgICByYXdfaW5wdXQoJyBceDFiWzE7OTJtUHJlc3MgZW50ZXIgdG8gdHJ5IGFnYWluICcpCiAgICAgICAgbG9nX21lbnUoKQogICAgZXhjZXB0IFVuYm91bmRMb2NhbEVycm9yOgogICAgICAgIHByaW50ICcnCiAgICAgICAgcHJpbnQgJ1x0SW52YWxpZCBjb29raWVzJwogICAgICAgIHByaW50ICcnCiAgICAgICAgcmF3X2lucHV0KCcgXHgxYlsxOzkybVByZXNzIGVudGVyIHRvIHRyeSBhZ2FpbiAnKQogICAgICAgIGxvZ19tZW51KCkKICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLlNTTEVycm9yOgogICAgICAgIHByaW50ICcnCiAgICAgICAgcHJpbnQgJ1x0SW52YWxpZCBjb29raWVzJwogICAgICAgIHByaW50ICcnCiAgICAgICAgcmF3X2lucHV0KCcgXHgxYlsxOzkybVByZXNzIGVudGVyIHRvIHRyeSBhZ2FpbiAnKQogICAgICAgIGxvZ19tZW51KCkKCgpkZWYgbWVudSgpOgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICB0cnk6CiAgICAgICAgdG9rZW4gPSBvcGVuKCdhY2Nlc3NfdG9rZW4udHh0JywgJ3InKS5yZWFkKCkKICAgIGV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOgogICAgICAgIHByaW50ICcnCiAgICAgICAgcHJpbnQgbG9nbwogICAgICAgIHByaW50ICdceDFiWzE7MzE7MW1Mb2dpbiBGQiBpZCB0byBjb250aW51ZScKICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgbG9nX21lbnUoKQoKICAgIHRyeToKICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS9tZT9hY2Nlc3NfdG9rZW49JyArIHRva2VuKQogICAgICAgIHEgPSBqc29uLmxvYWRzKHIudGV4dCkKICAgICAgICB6ID0gcVsnbmFtZSddCiAgICBleGNlcHQgKEtleUVycm9yLCBJT0Vycm9yKToKICAgICAgICBwcmludCBsb2dvCiAgICAgICAgcHJpbnQgJycKICAgICAgICBwcmludCAnXHQgQWNjb3VudCBDaGVla3BvaW50XHgxYlswOzk3bScKICAgICAgICBwcmludCAnJwogICAgICAgIG9zLnN5c3RlbSgncm0gLXJmIGFjY2Vzc190b2tlbi50eHQnKQogICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICBsb2dfbWVudSgpCiAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6CiAgICAgICAgcHJpbnQgbG9nbwogICAgICAgIHByaW50ICcnCiAgICAgICAgcHJpbnQgJ1x0IFR1cm4gb24gbW9iaWxlIGRhdGEvd2lmaVx4MWJbMDs5N20nCiAgICAgICAgcHJpbnQgJycKICAgICAgICByYXdfaW5wdXQoJyBceDFiWzE7OTJtUHJlc3MgZW50ZXIgYWZ0ZXIgdHVybmluZyBvbiBtb2JpbGUgZGF0YS93aWZpICcpCiAgICAgICAgbWVudSgpCgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBwcmludCBsb2dvCiAgICB0b2sgPSBvcGVuKCcvc2RjYXJkLy5oc3QudHh0JywgJ3InKS5yZWFkKCkKICAgIHByaW50ICcgIFx4MWJbMTs5Mm1Mb2dnZWQgaW4gdXNlcjogXHgxYlsxOzkxbScgKyB6CiAgICBwcmludCA0NyAqICctJwogICAgcHJpbnQgJyBceDFiWzE7OTNtIEFjdGl2ZSB0b2tlbjogXHgxYlsxOzkxbScgKyB0b2sKICAgIHByaW50ICcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICcKICAgIHByaW50ICdceDFiWzE7OTJtWzFdIENyYWNrIHdpdGggTmFtZSBwYXNzd29yZCcKICAgIHByaW50ICdceDFiWzE7OTJtWzJdIENyYWNrIHdpdGggTnVtYmVyIHBhc3N3b3JkJwogICAgcHJpbnQgJ1x4MWJbMTs5Mm1bM10gRmlsZSBFeHRyYWN0JwogICAgcHJpbnQgJ1x4MWJbMTs5Mm1bNF0gVmlldyB0b2tlbicKICAgIHByaW50ICdceDFiWzE7OTJtWzVdIExvZ291dCcKICAgIHByaW50ICdceDFiWzE7OTJtWzZdIERlbGV0ZSB0cmFzaCBmaWxlcycKICAgIG1lbnVfcygpCgoKZGVmIG1lbnVfcygpOgogICAgbXMgPSByYXdfaW5wdXQoJ1x4MWJbMTs5N21ceGUyXHg5NVx4YjBceGUyXHg5NFx4ODBjaGlkaVx4ZTJceDllXHhhNCAnKQogICAgaWYgbXMgPT0gJzEnOgogICAgICAgIGF1dG9fY3JhY2soKQogICAgZWxpZiBtcyA9PSAnMic6CiAgICAgICAgY2hvaWNlX2NyYWNrKCkKICAgIGVsaWYgbXMgPT0gJzMnOgogICAgICAgIG9zLnN5c3RlbSgncHl0aG9uMiBvay5weScpCiAgICBlbGlmIG1zID09ICc0JzoKICAgICAgICB2X3RvaygpCiAgICBlbGlmIG1zID09ICc1JzoKICAgICAgICBsb3V0KCkKICAgIGVsaWYgbXMgPT0gJzYnOgogICAgICAgIHJ0cmFzaCgpCiAgICBlbHNlOgogICAgICAgIHByaW50ICcnCiAgICAgICAgcHJpbnQgJ1x0U2VsZWN0IHZhbGlkIG9wdGlvbicKICAgICAgICBwcmludCAnJwogICAgICAgIG1lbnVfcygpCgoKZGVmIGNyYWNrKCk6CiAgICBnbG9iYWwgdG9rZXQKICAgIHRyeToKICAgICAgICB0b2tldCA9IG9wZW4oJ2xvZ2luLnR4dCcsICdyJykucmVhZCgpCiAgICBleGNlcHQgKEtleUVycm9yLCBJT0Vycm9yKToKICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICBwcmludCBsb2dvCiAgICAgICAgcHJpbnQgJ1x0IEZpbGUgTm90IEZvdW5kIFx4MWJbMDs5N20nCiAgICAgICAgcHJpbnQgJycKICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgbG9nX21lbnUoKQoKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgcHJpbnQgbG9nbwogICAgcHJpbnQgJ1x4MWJbMTs5M21+fn5+IE5hbWUgcGFzcyBjcmFja2luZyB+fn5+XHgxYlsxOzkxbScKICAgIHByaW50IDQ3ICogJy0nCiAgICBwcmludCAnXHgxYlsxOzkybVsxXSBQdWJsaWMgaWQgY2xvbmluZycKICAgIHByaW50ICdceDFiWzE7OTJtWzJdIEZvbGxvd2VycyBjbG9uaW5nJwogICAgcHJpbnQgJ1x4MWJbMTs5Mm1bM10gRmlsZSBjbG9uaW5nJwogICAgcHJpbnQgJ1x4MWJbMTs5Mm1bMF0gQmFjaycKICAgIGFfcygpCgoKZGVmIGF1dG9fY3JhY2soKToKICAgIGdsb2JhbCB0b2tlbgogICAgdHJ5OgogICAgICAgIHRva2VuID0gb3BlbignYWNjZXNzX3Rva2VuLnR4dCcsICdyJykucmVhZCgpCiAgICBleGNlcHQgKEtleUVycm9yLCBJT0Vycm9yKToKICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICBwcmludCBsb2dvCiAgICAgICAgcHJpbnQgJ1x0IExvZ2luIEZCIGlkIHRvIGNvbnRpbnVlXHgxYlswOzk3bScKICAgICAgICBwcmludCAnJwogICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICBsb2dfbWVudSgpCgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBwcmludCBsb2dvCiAgICBwcmludCAnXHgxYlsxOzkzbX5+fn4gTmFtZSBwYXNzIGNyYWNraW5nIH5+fn5ceDFiWzE7OTFtJwogICAgcHJpbnQgNDcgKiAnLScKICAgIHByaW50ICdceDFiWzE7OTJtWzFdIFB1YmxpYyBpZCBjbG9uaW5nJwogICAgcHJpbnQgJ1x4MWJbMTs5Mm1bMl0gRm9sbG93ZXJzIGNsb25pbmcnCiAgICBwcmludCAnXHgxYlsxOzkybVszXSBGaWxlIGNsb25pbmcnCiAgICBwcmludCAnXHgxYlsxOzkybVtCXSBCYWNrJwogICAgYV9zKCkKCgpkZWYgYV9zKCk6CiAgICBpZCA9IFtdCiAgICBjcHMgPSBbXQogICAgb2tzID0gW10KICAgIGFfcyA9IHJhd19pbnB1dCgnIFx4MWJbMTs5N21ceGUyXHg5NVx4YjBceGUyXHg5NFx4ODBjaGlkaVx4ZTJceDllXHhhNCAnKQogICAgaWYgYV9zID09ICcxJzoKICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICBwcmludCBsb2dvCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5M21+fn5+IE5hbWUgcGFzcyBwdWJsaWMgY3JhY2tpbmcgfn5+flx4MWJbMTs5MW0nCiAgICAgICAgcHJpbnQgNDcgKiAnLScKICAgICAgICBwcmludCAnXHgxYlsxOzkzbUZvciBleGFtcGxlOjEyMywxMjM0LDEyMzQ1LDc4NiwxMiwxMTIyXHgxYlsxOzkxbScKICAgICAgICBwcmludCA0NyAqICctJwogICAgICAgIHAxID0gcmF3X2lucHV0KCcgXHgxYlsxOzkybVsxXU5hbWUgKyBkaWdpdDogJykKICAgICAgICBwMiA9IHJhd19pbnB1dCgnIFx4MWJbMTs5Mm1bMl1OYW1lICsgZGlnaXQ6ICcpCiAgICAgICAgcDMgPSByYXdfaW5wdXQoJyBceDFiWzE7OTJtWzNdTmFtZSArIGRpZ2l0OiAnKQogICAgICAgIHA0ID0gcmF3X2lucHV0KCcgXHgxYlsxOzkybVs0XU5hbWUgKyBkaWdpdDogJykKICAgICAgICBpZHQgPSByYXdfaW5wdXQoJyBceDFiWzE7OTNtW1x4ZTJceDk4XHg4NV1FbnRlciBpZDogJykKICAgICAgICB0cnk6CiAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLycgKyBpZHQgKyAnP2FjY2Vzc190b2tlbj0nICsgdG9rZW4pCiAgICAgICAgICAgIHEgPSBqc29uLmxvYWRzKHIudGV4dCkKICAgICAgICAgICAgeiA9IHFbJ25hbWUnXQogICAgICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICAgICAgcHJpbnQgbG9nbwogICAgICAgICAgICBwcmludCAnXHgxYlsxOzkzbX5+fn5OYW1lIHBhc3MgcHVibGljIGNyYWNraW5nfn5+ficKICAgICAgICAgICAgcHJpbnQgJyBceDFiWzE7OTJtQ2xvbmluZyBmcm9tOiAnICsgegogICAgICAgIGV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICBwcmludCAnXHQgSW52YWxpZCB1c2VyIFx4MWJbMDs5N20nCiAgICAgICAgICAgIHJhd19pbnB1dCgnIFx4MWJbMTs5Mm1QcmVzcyBlbnRlciB0byB0cnkgYWdhaW4gJykKICAgICAgICAgICAgYXV0b19jcmFjaygpCgogICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLycgKyBpZHQgKyAnL2ZyaWVuZHM/YWNjZXNzX3Rva2VuPScgKyB0b2tlbikKICAgICAgICB6ID0ganNvbi5sb2FkcyhyLnRleHQpCiAgICAgICAgZm9yIGkgaW4gelsnZGF0YSddOgogICAgICAgICAgICB1aWQgPSBpWydpZCddCiAgICAgICAgICAgIG5hID0gaVsnbmFtZSddCiAgICAgICAgICAgIG5tID0gbmEucnNwbGl0KCcgJylbMF0KICAgICAgICAgICAgaWQuYXBwZW5kKHVpZCArICd8JyArIG5tKQoKICAgIGVsaWYgYV9zID09ICcyJzoKICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICBwcmludCBsb2dvCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5M21+fn5+IE5hbWUgcGFzcyBmb2xsb3dlcnMgY3JhY2tpbmcgfn5+flx4MWJbMTs5MW0nCiAgICAgICAgcHJpbnQgNDcgKiAnLScKICAgICAgICBwcmludCAnIFx4MWJbMTs5M21Gb3IgZXhhbXBsZToxMjMsMTIzNCwxMjM0NSw3ODYsMTIsMTEyMlx4MWJbMTs5MW0nCiAgICAgICAgcHJpbnQgNDcgKiAnLScKICAgICAgICBwMSA9IHJhd19pbnB1dCgnIFx4MWJbMTs5Mm1bMV1OYW1lICsgZGlnaXQ6ICcpCiAgICAgICAgcDIgPSByYXdfaW5wdXQoJyBceDFiWzE7OTJtWzJdTmFtZSArIGRpZ2l0OiAnKQogICAgICAgIHAzID0gcmF3X2lucHV0KCcgXHgxYlsxOzkybVszXU5hbWUgKyBkaWdpdDogJykKICAgICAgICBwNCA9IHJhd19pbnB1dCgnIFx4MWJbMTs5Mm1bNF1OYW1lICsgZGlnaXQ6ICcpCiAgICAgICAgaWR0ID0gcmF3X2lucHV0KCcgXHgxYlsxOzkzbVtceGUyXHg5OFx4ODVdRW50ZXIgaWQ6ICcpCiAgICAgICAgdHJ5OgogICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8nICsgaWR0ICsgJz9hY2Nlc3NfdG9rZW49JyArIHRva2VuKQogICAgICAgICAgICBxID0ganNvbi5sb2FkcyhyLnRleHQpCiAgICAgICAgICAgIHogPSBxWyduYW1lJ10KICAgICAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgICAgIHByaW50IGxvZ28KICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5M21+fn5+IE5hbWUgcGFzcyBmb2xsb3dlcnMgY3JhY2tpbmcgfn5+ficKICAgICAgICAgICAgcHJpbnQgJyBceDFiWzE7OTJtQ2xvbmluZyBmcm9tOiAnICsgegogICAgICAgIGV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICBwcmludCAnXHQgSW52YWxpZCB1c2VyIFx4MWJbMDs5N20nCiAgICAgICAgICAgIHJhd19pbnB1dCgnXHgxYlsxOzkybVByZXNzIGVudGVyIHRvIHRyeSBhZ2FpbiAnKQogICAgICAgICAgICBhdXRvX2NyYWNrKCkKCiAgICAgICAgciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJyArIGlkdCArICcvc3Vic2NyaWJlcnM/YWNjZXNzX3Rva2VuPScgKyB0b2tlbiArICcmbGltaXQ9OTk5OTk5JykKICAgICAgICB6ID0ganNvbi5sb2FkcyhyLnRleHQpCiAgICAgICAgZm9yIGkgaW4gelsnZGF0YSddOgogICAgICAgICAgICB1aWQgPSBpWydpZCddCiAgICAgICAgICAgIG5hID0gaVsnbmFtZSddCiAgICAgICAgICAgIG5tID0gbmEucnNwbGl0KCcgJylbMF0KICAgICAgICAgICAgaWQuYXBwZW5kKHVpZCArICd8JyArIG5tKQoKICAgIGVsaWYgYV9zID09ICczJzoKICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICBwcmludCBsb2dvCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5M21+fn5+IE5hbWUgcGFzcyBGaWxlIGNyYWNraW5nIH5+fn5ceDFiWzE7OTFtJwogICAgICAgIHByaW50IDQ3ICogJy0nCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5M21Gb3IgZXhhbXBsZToxMjMsMTIzNCwxMjM0NSw3ODYsMTIsMTEyMlx4MWJbMTs5MW0nCiAgICAgICAgcHJpbnQgNDcgKiAnLScKICAgICAgICBwMSA9IHJhd19pbnB1dCgnIFx4MWJbMTs5Mm1bMV1OYW1lICsgZGlnaXQ6ICcpCiAgICAgICAgcDIgPSByYXdfaW5wdXQoJyBceDFiWzE7OTJtWzJdTmFtZSArIGRpZ2l0OiAnKQogICAgICAgIHAzID0gcmF3X2lucHV0KCcgXHgxYlsxOzkybVszXU5hbWUgKyBkaWdpdDogJykKICAgICAgICBwNCA9IHJhd19pbnB1dCgnIFx4MWJbMTs5Mm1bNF1OYW1lICsgZGlnaXQ6ICcpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZGxpc3QgPSByYXdfaW5wdXQoJ1srXSBGaWxlIE5hbWU6ICcpCiAgICAgICAgICAgIGZvciBsaW5lIGluIG9wZW4oaWRsaXN0LCAncicpLnJlYWRsaW5lcygpOgogICAgICAgICAgICAgICAgaWQuYXBwZW5kKGxpbmUuc3RyaXAoKSkKCiAgICAgICAgZXhjZXB0IElPRXJyb3I6CiAgICAgICAgICAgIHByaW50ICdbIV0gRmlsZSBOb3QgRm91bmQuJwogICAgICAgICAgICByYXdfaW5wdXQoJ1ByZXNzIEVudGVyIFRvIEJhY2suICcpCiAgICAgICAgICAgIGNyYWNrKCkKCiAgICBlbGlmIGFfcyA9PSAnMCc6CiAgICAgICAgbWVudSgpCiAgICBlbHNlOgogICAgICAgIHByaW50ICcnCiAgICAgICAgcHJpbnQgJ1x0Q2hvb3NlIHZhbGlkIG9wdGlvbicgKyB3CiAgICAgICAgYV9zKCkKICAgIHByaW50ICcgVG90YWwgaWRzOiAnICsgc3RyKGxlbihpZCkpCiAgICB0aW1lLnNsZWVwKDAuNSkKICAgIHByaW50ICcgXHgxYlsxOzk3bUNyYWNrIFJ1bm5pbmdceDFiWzE7OTFtICcKICAgIHRpbWUuc2xlZXAoMC41KQogICAgcHJpbnQgNDcgKiAnLScKICAgIHByaW50ICdcdFx4MWJbMTs5NG1DaGlkaSBLaGFuXHgxYlsxOzkxbScKICAgIHByaW50IDQ3ICogJy0nCgogICAgZGVmIG1haW4oYXJnKToKICAgICAgICB1c2VyID0gYXJnCiAgICAgICAgdWlkLCBuYW1lID0gdXNlci5zcGxpdCgnfCcpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBwYXNzMSA9IG5hbWUubG93ZXIoKSArIHAxCiAgICAgICAgICAgIGRhdGEgPSByZXF1ZXN0cy5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hdXRoP2lkPScgKyB1aWQgKyAnJnBhc3M9JyArIHBhc3MxLCBoZWFkZXJzPWhlYWRlcikudGV4dAogICAgICAgICAgICBxID0ganNvbi5sb2FkcyhkYXRhKQogICAgICAgICAgICBpZiAnbG9jJyBpbiBxOgogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5Mm1bQ2hpZGkgT0tdIFx4MWJbMTszMm0nICsgdWlkICsgJyB8ICcgKyBwYXNzMSArICdceDFiWzA7OTdtJwogICAgICAgICAgICAgICAgb2sgPSBvcGVuKCcvc2RjYXJkL2lkcy9PSy50eHQnLCAnYScpCiAgICAgICAgICAgICAgICBvay53cml0ZSh1aWQgKyAnIHwgJyArIHBhc3MxICsgJ1xuJykKICAgICAgICAgICAgICAgIG9rLmNsb3NlKCkKICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQodWlkICsgcGFzczEpCiAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHFbJ2Vycm9yJ106CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzMxOzFtW0NoaWRpIENQXSAnICsgdWlkICsgJyB8ICcgKyBwYXNzMQogICAgICAgICAgICAgICAgY3AgPSBvcGVuKCdDUC50eHQnLCAnYScpCiAgICAgICAgICAgICAgICBjcC53cml0ZSh1aWQgKyAnIHwgJyArIHBhc3MxICsgJ1xuJykKICAgICAgICAgICAgICAgIGNwLmNsb3NlKCkKICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQodWlkICsgcGFzczEpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwYXNzMiA9IG5hbWUubG93ZXIoKSArIHAyCiAgICAgICAgICAgICAgICBkYXRhID0gcmVxdWVzdHMuZ2V0KCdodHRwOi8vbG9jYWxob3N0OjUwMDAvYXV0aD9pZD0nICsgdWlkICsgJyZwYXNzPScgKyBwYXNzMiwgaGVhZGVycz1oZWFkZXIpLnRleHQKICAgICAgICAgICAgICAgIHEgPSBqc29uLmxvYWRzKGRhdGEpCiAgICAgICAgICAgICAgICBpZiAnbG9jJyBpbiBxOgogICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTJtW0NoaWRpIE9LXSBceDFiWzE7MzJtJyArIHVpZCArICcgfCAnICsgcGFzczIgKyAnXHgxYlswOzk3bScKICAgICAgICAgICAgICAgICAgICBvayA9IG9wZW4oJy9zZGNhcmQvaWRzL09LLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICBvay53cml0ZSh1aWQgKyAnIHwgJyArIHBhc3MyICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICBvay5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh1aWQgKyBwYXNzMikKICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHFbJ2Vycm9yJ106CiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTszMTsxbVtDaGlkaSBDUF0gJyArIHVpZCArICcgfCAnICsgcGFzczIKICAgICAgICAgICAgICAgICAgICBjcCA9IG9wZW4oJ0NQLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICBjcC53cml0ZSh1aWQgKyAnIHwgJyArIHBhc3MyICsgJ1xuJykKICAgICAgICAgICAgICAgICAgICBjcC5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZCh1aWQgKyBwYXNzMikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcGFzczMgPSBuYW1lLmxvd2VyKCkgKyBwMwogICAgICAgICAgICAgICAgICAgIGRhdGEgPSByZXF1ZXN0cy5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hdXRoP2lkPScgKyB1aWQgKyAnJnBhc3M9JyArIHBhc3MzLCBoZWFkZXJzPWhlYWRlcikudGV4dAogICAgICAgICAgICAgICAgICAgIHEgPSBqc29uLmxvYWRzKGRhdGEpCiAgICAgICAgICAgICAgICAgICAgaWYgJ2xvYycgaW4gcToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5Mm1bQ2hpZGkgT0tdIFx4MWJbMTszMm0nICsgdWlkICsgJyB8ICcgKyBwYXNzMyArICdceDFiWzA7OTdtJwogICAgICAgICAgICAgICAgICAgICAgICBvayA9IG9wZW4oJy9zZGNhcmQvaWRzL09LLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgb2sud3JpdGUodWlkICsgJyB8ICcgKyBwYXNzMyArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgIG9rLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh1aWQgKyBwYXNzMykKICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBxWydlcnJvciddOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzMxOzFtW0NoaWRpIENQXSAnICsgdWlkICsgJyB8ICcgKyBwYXNzMwogICAgICAgICAgICAgICAgICAgICAgICBjcCA9IG9wZW4oJ0NQLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgY3Aud3JpdGUodWlkICsgJyB8ICcgKyBwYXNzMyArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgIGNwLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZCh1aWQgKyBwYXNzMykKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwYXNzNCA9IG5hbWUubG93ZXIoKSArIHA0CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSByZXF1ZXN0cy5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hdXRoP2lkPScgKyB1aWQgKyAnJnBhc3M9JyArIHBhc3M0LCBoZWFkZXJzPWhlYWRlcikudGV4dAogICAgICAgICAgICAgICAgICAgICAgICBxID0ganNvbi5sb2FkcyhkYXRhKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnbG9jJyBpbiBxOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5Mm1bLU9LXSBceDFiWzE7MzJtJyArIHVpZCArICcgfCAnICsgcGFzczQgKyAnXHgxYlswOzk3bScKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rID0gb3BlbignL3NkY2FyZC9pZHMvT0sudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2sud3JpdGUodWlkICsgJyB8ICcgKyBwYXNzNCArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvay5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHVpZCArIHBhc3M0KQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBxWydlcnJvciddOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTszMTsxbVtDaGlkaSBDUF0gJyArIHVpZCArICcgfCAnICsgcGFzczQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwID0gb3BlbignQ1AudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Aud3JpdGUodWlkICsgJyB8ICcgKyBwYXNzNCArICdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcC5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHMuYXBwcGVuZCh1aWQgKyBwYXNzNCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHBhc3MKCiAgICBwID0gVGhyZWFkUG9vbCgzMCkKICAgIHAubWFwKG1haW4sIGlkKQogICAgcHJpbnQgNDcgKiAnLScKICAgIHByaW50ICcgXHgxYlsxOzkybUNyYWNrIERvbmUnCiAgICBwcmludCAnIFx4MWJbMTs5Mm1Ub3RhbCBPay9DcDonICsgc3RyKGxlbihva3MpKSArICcvJyArIHN0cihsZW4oY3BzKSkKICAgIHByaW50IDQ3ICogJy0nCiAgICByYXdfaW5wdXQoJyBceDFiWzE7OTNtUHJlc3MgZW50ZXIgdG8gYmFjaycpCiAgICBhdXRvX2NyYWNrKCkKCgpkZWYgY3JhY2tfYigpOgogICAgZ2xvYmFsIHRva2V0CiAgICB0cnk6CiAgICAgICAgdG9rZXQgPSBvcGVuKCdsb2dpbi50eHQnLCAncicpLnJlYWQoKQogICAgZXhjZXB0IChLZXlFcnJvciwgSU9FcnJvcik6CiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgcHJpbnQgbG9nbwogICAgICAgIHByaW50ICdcdCBGaWxlIE5vdCBGb3VuZCBceDFiWzA7OTdtJwogICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICBsb2dfbWVudSgpCgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBwcmludCBsb2dvCiAgICBwcmludCAnXHgxYlsxOzkzbX5+fn4gTnVtYmVyIHBhc3MgY3JhY2tpbmcgfn5+flx4MWJbMTs5MW0nCiAgICBwcmludCA0NyAqICctJwogICAgcHJpbnQgJ1x4MWJbMTs5Mm1bMV0gUHVibGljIGlkIGNsb25pbmcnCiAgICBwcmludCAnXHgxYlsxOzkybVsyXSBGb2xsb3dlcnMgY2xvbmluZycKICAgIHByaW50ICdceDFiWzE7OTJtWzNdIEZpbGUgY2xvbmluZycKICAgIHByaW50ICdceDFiWzE7OTJtWzBdIEJhY2snCiAgICBjX3MoKQoKCmRlZiBjaG9pY2VfY3JhY2soKToKICAgIGdsb2JhbCB0b2tlbgogICAgdHJ5OgogICAgICAgIHRva2VuID0gb3BlbignYWNjZXNzX3Rva2VuLnR4dCcsICdyJykucmVhZCgpCiAgICBleGNlcHQgKEtleUVycm9yLCBJT0Vycm9yKToKICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICBwcmludCBsb2dvCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5M21+fn4gTG9naW4gRkIgaWQgdG8gY29udGludWUgfn5+JwogICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICBsb2dfbWVudSgpCgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBwcmludCBsb2dvCiAgICBwcmludCAnXHgxYlsxOzkzbX5+fn4gTnVtYmVyIHBhc3MgY3JhY2tpbmcgfn5+flx4MWJbMTs5MW0nCiAgICBwcmludCA0NyAqICctJwogICAgcHJpbnQgJ1x4MWJbMTs5Mm1bMV0gUHVibGljIGlkIGNsb25pbmcnCiAgICBwcmludCAnXHgxYlsxOzkybVsyXSBGb2xsb3dlcnMgY2xvbmluZycKICAgIHByaW50ICdceDFiWzE7OTJtWzNdIEZpbGUgY2xvbmluZycKICAgIHByaW50ICdceDFiWzE7OTJtW0JdIEJhY2snCiAgICBjX3MoKQoKCmRlZiBjX3MoKToKICAgIGlkID0gW10KICAgIGNwcyA9IFtdCiAgICBva3MgPSBbXQogICAgYV9zID0gcmF3X2lucHV0KCcgXHgxYlsxOzk3bVx4ZTJceDk1XHhiMFx4ZTJceDk0XHg4MGNoaWRpXHhlMlx4OWVceGE0ICcpCiAgICBpZiBhX3MgPT0gJzEnOgogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgICAgIHByaW50IGxvZ28KICAgICAgICBwcmludCAnXHgxYlsxOzkzbSB+fn5+IE51bWJlciBwYXNzIFB1YmxpYyBjcmFja2luZyB+fn5+XHgxYlsxOzkxbScKICAgICAgICBwcmludCA0NyAqICctJwogICAgICAgIHByaW50ICdceDFiWzE7OTNtIEZvciBleGFtcGxlOjIzNDU2NywyMjMzNDQsMzM0NDU1LDQ0NTU2Nlx4MWJbMTs5MW0nCiAgICAgICAgcHJpbnQgNDcgKiAnLScKICAgICAgICBwYXNzMSA9IHJhd19pbnB1dCgnIFx4MWJbMTs5Mm1bMV1QYXNzd29yZDogJykKICAgICAgICBwYXNzMiA9IHJhd19pbnB1dCgnIFx4MWJbMTs5Mm1bMl1QYXNzd29yZDogJykKICAgICAgICBwYXNzMyA9IHJhd19pbnB1dCgnIFx4MWJbMTs5Mm1bM11QYXNzd29yZDogJykKICAgICAgICBwYXNzNCA9IHJhd19pbnB1dCgnIFx4MWJbMTs5Mm1bNF1QYXNzd29yZDogJykKICAgICAgICBpZHQgPSByYXdfaW5wdXQoJyBceDFiWzE7OTNtW1x4ZTJceDk4XHg4NV1FbnRlciBpZDogJykKICAgICAgICB0cnk6CiAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLycgKyBpZHQgKyAnP2FjY2Vzc190b2tlbj0nICsgdG9rZW4pCiAgICAgICAgICAgIHEgPSBqc29uLmxvYWRzKHIudGV4dCkKICAgICAgICAgICAgeiA9IHFbJ25hbWUnXQogICAgICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICAgICAgcHJpbnQgbG9nbwogICAgICAgICAgICBwcmludCAnXHgxYlsxOzkzbSB+fn5+IE51bWJlciBwYXNzIFB1YmxpYyBjcmFja2luZyB+fn5+JwogICAgICAgICAgICBwcmludCAnIENsb25pbmcgZnJvbTogJyArIHoKICAgICAgICBleGNlcHQgKEtleUVycm9yLCBJT0Vycm9yKToKICAgICAgICAgICAgcHJpbnQgJ1x0IEludmFsaWQgdXNlciBceDFiWzA7OTdtJwogICAgICAgICAgICByYXdfaW5wdXQoJyBQcmVzcyBlbnRlciB0byB0cnkgYWdhaW4gJykKICAgICAgICAgICAgY2hvaWNlX2NyYWNrKCkKCiAgICAgICAgciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJyArIGlkdCArICcvZnJpZW5kcz9hY2Nlc3NfdG9rZW49JyArIHRva2VuKQogICAgICAgIHogPSBqc29uLmxvYWRzKHIudGV4dCkKICAgICAgICBmb3IgaSBpbiB6WydkYXRhJ106CiAgICAgICAgICAgIHVpZCA9IGlbJ2lkJ10KICAgICAgICAgICAgbmEgPSBpWyduYW1lJ10KICAgICAgICAgICAgbm0gPSBuYS5yc3BsaXQoJyAnKVswXQogICAgICAgICAgICBpZC5hcHBlbmQodWlkICsgJ3wnICsgbm0pCgogICAgZWxpZiBhX3MgPT0gJzInOgogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgICAgIHByaW50IGxvZ28KICAgICAgICBwcmludCAnXHgxYlsxOzkzbX5+fn4gTnVtYmVyIHBhc3MgZm9sbG93ZXJzIGNyYWNraW5nIH5+fn5ceDFiWzE7OTFtJwogICAgICAgIHByaW50IDQ3ICogJy0nCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5M20gRm9yIGV4YW1wbGU6MjM0NTY3LDIyMzM0NCwzMzQ0NTUsNDQ1NTY2XHgxYlsxOzkxbScKICAgICAgICBwcmludCA0NyAqICctJwogICAgICAgIHBhc3MxID0gcmF3X2lucHV0KCcgXHgxYlsxOzkybVsxXVBhc3N3b3JkOiAnKQogICAgICAgIHBhc3MyID0gcmF3X2lucHV0KCcgXHgxYlsxOzkybVsyXVBhc3N3b3JkOiAnKQogICAgICAgIHBhc3MzID0gcmF3X2lucHV0KCcgXHgxYlsxOzkybVszXVBhc3N3b3JkOiAnKQogICAgICAgIHBhc3M0ID0gcmF3X2lucHV0KCcgXHgxYlsxOzkybVs0XVBhc3N3b3JkOiAnKQogICAgICAgIGlkdCA9IHJhd19pbnB1dCgnIFx4MWJbMTs5M21FbnRlciBpZDogJykKICAgICAgICB0cnk6CiAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLycgKyBpZHQgKyAnP2FjY2Vzc190b2tlbj0nICsgdG9rZW4pCiAgICAgICAgICAgIHEgPSBqc29uLmxvYWRzKHIudGV4dCkKICAgICAgICAgICAgeiA9IHFbJ25hbWUnXQogICAgICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICAgICAgcHJpbnQgbG9nbwogICAgICAgICAgICBwcmludCAnXHgxYlsxOzkzbX5+fn4gTnVtYmVyIHBhc3MgZm9sbG93ZXJzIGNyYWNraW5nIH5+fn4nCiAgICAgICAgICAgIHByaW50ICcgQ2xvbmluZyBmcm9tOiAnICsgegogICAgICAgIGV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOgogICAgICAgICAgICBwcmludCAnXHQgSW52YWxpZCB1c2VyIFx4MWJbMDs5N20nCiAgICAgICAgICAgIHJhd19pbnB1dCgnUHJlc3MgZW50ZXIgdG8gdHJ5IGFnYWluICcpCiAgICAgICAgICAgIGF1dG9fY3JhY2soKQoKICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8nICsgaWR0ICsgJy9zdWJzY3JpYmVycz9hY2Nlc3NfdG9rZW49JyArIHRva2VuICsgJyZsaW1pdD05OTk5OTknKQogICAgICAgIHogPSBqc29uLmxvYWRzKHIudGV4dCkKICAgICAgICBmb3IgaSBpbiB6WydkYXRhJ106CiAgICAgICAgICAgIHVpZCA9IGlbJ2lkJ10KICAgICAgICAgICAgbmEgPSBpWyduYW1lJ10KICAgICAgICAgICAgbm0gPSBuYS5yc3BsaXQoJyAnKVswXQogICAgICAgICAgICBpZC5hcHBlbmQodWlkICsgJ3wnICsgbm0pCgogICAgZWxpZiBhX3MgPT0gJzMnOgogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgICAgIHByaW50IGxvZ28KICAgICAgICBwcmludCAnXHgxYlsxOzkzbSB+fn5+IE51bWJlciBwYXNzIEZpbGUgY3JhY2tpbmcgfn5+flx4MWJbMTs5MW0nCiAgICAgICAgcHJpbnQgNDcgKiAnLScKICAgICAgICBwcmludCAnXHgxYlsxOzkzbSBGb3IgZXhhbXBsZToyMzQ1NjcsMjIzMzQ0LDMzNDQ1NSw0NDU1NjZceDFiWzE7OTFtJwogICAgICAgIHByaW50IDQ3ICogJy0nCiAgICAgICAgcGFzczEgPSByYXdfaW5wdXQoJyBceDFiWzE7OTJtWzFdUGFzc3dvcmQ6ICcpCiAgICAgICAgcGFzczIgPSByYXdfaW5wdXQoJyBceDFiWzE7OTJtWzJdUGFzc3dvcmQ6ICcpCiAgICAgICAgcGFzczMgPSByYXdfaW5wdXQoJyBceDFiWzE7OTJtWzNdUGFzc3dvcmQ6ICcpCiAgICAgICAgcGFzczQgPSByYXdfaW5wdXQoJyBceDFiWzE7OTJtWzRdUGFzc3dvcmQ6ICcpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpZGxpc3QgPSByYXdfaW5wdXQoJ1srXSBGaWxlIE5hbWU6ICcpCiAgICAgICAgICAgIGZvciBsaW5lIGluIG9wZW4oaWRsaXN0LCAncicpLnJlYWRsaW5lcygpOgogICAgICAgICAgICAgICAgaWQuYXBwZW5kKGxpbmUuc3RyaXAoKSkKCiAgICAgICAgZXhjZXB0IElPRXJyb3I6CiAgICAgICAgICAgIHByaW50ICdbIV0gRmlsZSBOb3QgRm91bmQuJwogICAgICAgICAgICByYXdfaW5wdXQoJ1ByZXNzIEVudGVyIFRvIEJhY2suICcpCiAgICAgICAgICAgIGNyYWNrX2IoKQoKICAgIGVsaWYgYV9zID09ICcwJzoKICAgICAgICBtZW51KCkKICAgIGVsc2U6CiAgICAgICAgcHJpbnQgJycKICAgICAgICBwcmludCAnXHQgQ2hvb3NlIHZhbGlkIG9wdGlvbicgKyB3CiAgICAgICAgY19zKCkKICAgIHByaW50ICcgVG90YWwgaWRzOiAnICsgc3RyKGxlbihpZCkpCiAgICB0aW1lLnNsZWVwKDAuNSkKICAgIHByaW50ICcgXHgxYlsxOzk3bX5+fiBDcmFjayBSdW5uaW5nIH5+flx4MWJbMTs5MW0nCiAgICB0aW1lLnNsZWVwKDAuNSkKICAgIHByaW50IDQ3ICogJy0nCiAgICBwcmludCAnXHRceDFiWzE7OTRtQ2hpZGkgS2hhblx4MWJbMTs5MW0nCiAgICBwcmludCA0NyAqICctJwoKICAgIGRlZiBtYWluKGFyZyk6CiAgICAgICAgdXNlciA9IGFyZwogICAgICAgIHVpZCwgbmFtZSA9IHVzZXIuc3BsaXQoJ3wnKQogICAgICAgIHRyeToKICAgICAgICAgICAgZGF0YSA9IHJlcXVlc3RzLmdldCgnaHR0cDovL2xvY2FsaG9zdDo1MDAwL2F1dGg/aWQ9JyArIHVpZCArICcmcGFzcz0nICsgcGFzczEsIGhlYWRlcnM9aGVhZGVyKS50ZXh0CiAgICAgICAgICAgIHEgPSBqc29uLmxvYWRzKGRhdGEpCiAgICAgICAgICAgIGlmICdsb2MnIGluIHE6CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkybVtDaGlkaSBPS10gXHgxYlsxOzMybScgKyB1aWQgKyAnIHwgJyArIHBhc3MxICsgJ1x4MWJbMDs5N20nCiAgICAgICAgICAgICAgICBvayA9IG9wZW4oJy9zZGNhcmQvaWRzL09LLnR4dCcsICdhJykKICAgICAgICAgICAgICAgIG9rLndyaXRlKHVpZCArICcgfCAnICsgcGFzczEgKyAnXG4nKQogICAgICAgICAgICAgICAgb2suY2xvc2UoKQogICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh1aWQgKyBwYXNzMSkKICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3InXToKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7MzE7MW1bQ2hpZGkgQ1BdICcgKyB1aWQgKyAnIHwgJyArIHBhc3MxCiAgICAgICAgICAgICAgICBjcCA9IG9wZW4oJ0NQLnR4dCcsICdhJykKICAgICAgICAgICAgICAgIGNwLndyaXRlKHVpZCArICcgfCAnICsgcGFzczEgKyAnXG4nKQogICAgICAgICAgICAgICAgY3AuY2xvc2UoKQogICAgICAgICAgICAgICAgY3BzLmFwcGVuZCh1aWQgKyBwYXNzMSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGRhdGEgPSByZXF1ZXN0cy5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hdXRoP2lkPScgKyB1aWQgKyAnJnBhc3M9JyArIHBhc3MyLCBoZWFkZXJzPWhlYWRlcikudGV4dAogICAgICAgICAgICAgICAgcSA9IGpzb24ubG9hZHMoZGF0YSkKICAgICAgICAgICAgICAgIGlmICdsb2MnIGluIHE6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5Mm1bQ2hpZGkgT0tdIFx4MWJbMTszMm0nICsgdWlkICsgJyB8ICcgKyBwYXNzMiArICdceDFiWzA7OTdtJwogICAgICAgICAgICAgICAgICAgIG9rID0gb3BlbignL3NkY2FyZC9pZHMvT0sudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgIG9rLndyaXRlKHVpZCArICcgfCAnICsgcGFzczIgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgIG9rLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHVpZCArIHBhc3MyKQogICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3InXToKICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzMxOzFtW0NoaWRpIENQXSAnICsgdWlkICsgJyB8ICcgKyBwYXNzMgogICAgICAgICAgICAgICAgICAgIGNwID0gb3BlbignQ1AudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgICAgIGNwLndyaXRlKHVpZCArICcgfCAnICsgcGFzczIgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgIGNwLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICBjcHMuYXBwZW5kKHVpZCArIHBhc3MyKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBkYXRhID0gcmVxdWVzdHMuZ2V0KCdodHRwOi8vbG9jYWxob3N0OjUwMDAvYXV0aD9pZD0nICsgdWlkICsgJyZwYXNzPScgKyBwYXNzMywgaGVhZGVycz1oZWFkZXIpLnRleHQKICAgICAgICAgICAgICAgICAgICBxID0ganNvbi5sb2FkcyhkYXRhKQogICAgICAgICAgICAgICAgICAgIGlmICdsb2MnIGluIHE6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTJtW0NoaWRpIE9LXSBceDFiWzE7MzJtJyArIHVpZCArICcgfCAnICsgcGFzczMgKyAnXHgxYlswOzk3bScKICAgICAgICAgICAgICAgICAgICAgICAgb2sgPSBvcGVuKCcvc2RjYXJkL2lkcy9PSy50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgIG9rLndyaXRlKHVpZCArICcgfCAnICsgcGFzczMgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICBvay5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQodWlkICsgcGFzczMpCiAgICAgICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3InXToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTszMTsxbVtDaGlkaSBDUF0gJyArIHVpZCArICcgfCAnICsgcGFzczMKICAgICAgICAgICAgICAgICAgICAgICAgY3AgPSBvcGVuKCdDUC50eHQnLCAnYScpCiAgICAgICAgICAgICAgICAgICAgICAgIGNwLndyaXRlKHVpZCArICcgfCAnICsgcGFzczMgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICBjcC5jbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQodWlkICsgcGFzczMpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHJlcXVlc3RzLmdldCgnaHR0cDovL2xvY2FsaG9zdDo1MDAwL2F1dGg/aWQ9JyArIHVpZCArICcmcGFzcz0nICsgcGFzczQsIGhlYWRlcnM9aGVhZGVyKS50ZXh0CiAgICAgICAgICAgICAgICAgICAgICAgIHEgPSBqc29uLmxvYWRzKGRhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICdsb2MnIGluIHE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkybVtDaGlkaSBPS10gXHgxYlsxOzMybScgKyB1aWQgKyAnIHwgJyArIHBhc3M0ICsgJ1x4MWJbMDs5N20nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvayA9IG9wZW4oJy9zZGNhcmQvaWRzL09LLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rLndyaXRlKHVpZCArICcgfCAnICsgcGFzczQgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2suY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh1aWQgKyBwYXNzNCkKICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3InXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7MzE7MW1bQ2hpZGkgQ1BdICcgKyB1aWQgKyAnIHwgJyArIHBhc3M0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcCA9IG9wZW4oJ0NQLnR4dCcsICdhJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwLndyaXRlKHVpZCArICcgfCAnICsgcGFzczQgKyAnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3AuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3BzLmFwcHBlbmQodWlkICsgcGFzczQpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwYXNzCgogICAgcCA9IFRocmVhZFBvb2woMzApCiAgICBwLm1hcChtYWluLCBpZCkKICAgIHByaW50IDQ3ICogJy0nCiAgICBwcmludCAnIFx4MWJbMTs5Mm1DcmFjayBEb25lJwogICAgcHJpbnQgJ1x4MWJbMTs5Mm0gVG90YWwgT2svQ3A6JyArIHN0cihsZW4ob2tzKSkgKyAnLycgKyBzdHIobGVuKGNwcykpCiAgICBwcmludCA0NyAqICctJwogICAgcmF3X2lucHV0KCdceDFiWzE7OTNtIFByZXNzIGVudGVyIHRvIGJhY2snKQogICAgY2hvaWNlX2NyYWNrKCkKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgcmVnKCkK"))